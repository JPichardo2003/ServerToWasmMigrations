@page "/ConsultaTicket";
@inject HttpClient httpClient

<div class="card-header row">
    <div class="col-md-4">
        <label>Desde: </label>
        <InputDate @bind-Value="Desde" class="form-control id-input"></InputDate>
    </div>
    <div class="col-md-4">
        <label>Hasta: </label>
        <InputDate @bind-Value="Hasta" class="form-control id-input"></InputDate>
    </div>
    <label>Filtrar Por:</label>
    <div class="col-md-6 input-group filter-input">
        <InputSelect @bind-Value="Filtro" class="form-select">
            <option value="1">Ticket Id</option>
            <option value="2">Asunto</option>
        </InputSelect>
        <div class="input-group-append">
            <button type="button" class="btn btn-dark oi oi-magnifying-glass" @onclick="Buscar"></button>
        </div>
    </div>
    <div class="col-md-6">
        @switch (Filtro)
        {
            case 1:
                <InputNumber @bind-Value="tickets!.TicketId" class="form-control"></InputNumber>
                break;
            case 2:
                <InputText @bind-Value="tickets!.Asunto" class="form-control"></InputText>
                break;
        }
    </div>
</div>

@if (Tickets is not null)
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Ticket ID</th>
                    <th>Cliente ID</th>
                    <th>Prioridad ID</th>
                    <th>Fecha</th>
                    <th>Asunto</th>
                    <th>Descripci&oacute;n</th>
                    <th>Solicitado Por</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tickets in Tickets)
                {
                    <tr>
                        <td>@tickets.TicketId</td>
                        <td>@tickets.ClienteId</td>
                        <td>@tickets.PrioridadId</td>
                        <td>@tickets.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@tickets.Asunto</td>
                        <td>@tickets.Descripción</td>
                        <td>@tickets.SolicitadoPor</td>
                        <td><a href="RegistroTicket/@tickets.TicketId">Ver</a></td>
                    </tr>
                }
                <tr>
                    <td>Conteo: @Conteo</td>
                </tr>
            </tbody>
        </table>
    </div>
}


@code {

    public int Filtro { get; set; }
    public List<Tickets>? Tickets { get; set; }
    public Tickets? tickets { get; set; } = new Tickets();
    public int Conteo { get; set; }

    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Buscar();
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        if (Filtro == 1 && tickets!.TicketId > 0)
        {
            Tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!.Where(t => t.TicketId == tickets!.TicketId && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 2 && !string.IsNullOrEmpty(tickets!.Asunto))
        {
            Tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets"))!.Where(t => t.Asunto!.ToLower() == tickets!.Asunto.ToLower() && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
            StateHasChanged();
        }
        else
        {
            Tickets = await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets");
            StateHasChanged();
        }
        Conteo = Tickets != null ? Tickets!.Count() : 0;
    }

}